name: Java CI with Gradle

on:
  push:
    branches: [ "main", "release/#*" ]
  pull_request:
    branches: [ "main", "release/#*" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 1. Java 21 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 2. application-secret/cloud.properties 생성
      - name: Create application-secret.properties
        run: |
          echo "spring.security.user.name=${{ secrets.SECURITY_USERNAME }}" > ./src/main/resources/application-secret.properties
          echo "spring.security.user.password=${{ secrets.SECURITY_PASSWORD }}" >> ./src/main/resources/application-secret.properties

      - name: Create application-cloud.properties
        run: |
          echo "eureka.instance.hostname=test.aether.asia" > ./src/main/resources/application-cloud.properties
          echo "eureka.client.service-url.default-zone=${{ secrets.EUREKA_CLIENT_SERVICE_URL }}" >> ./src/main/resources/application-cloud.properties

      # 3. SpringBoot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: clean bootJar

      # 4. Docker 이미지 빌드
      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/aether-back-eureka-server .

      # 5. DockerHub 로그인
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 6. DockerHub 이미지 push
      - name: DockerHub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/aether-back-eureka-server

  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됨
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 pull 받음
      - name: Docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/aether-back-eureka-server

      # 2. 기존 컨테이너 중지
      - name: Docker stop Container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행
      - name: Docker run new Container
        run: sudo docker run --name aether-back-eureka-server --rm -d -p 8761:8761 ${{ secrets.DOCKERHUB_USERNAME }}/aether-back-eureka-server

      # 4. 미사용 이미지 정리
      - name: Delete old Docker Image
        run: sudo docker system prune -f
